{"version":3,"file":"index.js","sources":["../src/history.ts","../src/history-editor.ts","../src/with-history.ts"],"sourcesContent":["import { isPlainObject } from 'is-plain-object'\nimport { Operation, Range } from 'slate'\n\ninterface Batch {\n  operations: Operation[]\n  selectionBefore: Range | null\n}\n\n/**\n * `History` objects hold all of the operations that are applied to a value, so\n * they can be undone or redone as necessary.\n */\n\nexport interface History {\n  redos: Batch[]\n  undos: Batch[]\n}\n\n// eslint-disable-next-line no-redeclare\nexport const History = {\n  /**\n   * Check if a value is a `History` object.\n   */\n\n  isHistory(value: any): value is History {\n    return (\n      isPlainObject(value) &&\n      Array.isArray(value.redos) &&\n      Array.isArray(value.undos) &&\n      (value.redos.length === 0 ||\n        Operation.isOperationList(value.redos[0].operations)) &&\n      (value.undos.length === 0 ||\n        Operation.isOperationList(value.undos[0].operations))\n    )\n  },\n}\n","import { BaseEditor, Editor } from 'slate'\nimport { History } from './history'\n\n/**\n * Weakmaps for attaching state to the editor.\n */\n\nexport const HISTORY = new WeakMap<Editor, History>()\nexport const SAVING = new WeakMap<Editor, boolean | undefined>()\nexport const MERGING = new WeakMap<Editor, boolean | undefined>()\nexport const SPLITTING_ONCE = new WeakMap<Editor, boolean | undefined>()\n\n/**\n * `HistoryEditor` contains helpers for history-enabled editors.\n */\n\nexport interface HistoryEditor extends BaseEditor {\n  history: History\n  undo: () => void\n  redo: () => void\n  writeHistory: (stack: 'undos' | 'redos', batch: any) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const HistoryEditor = {\n  /**\n   * Check if a value is a `HistoryEditor` object.\n   */\n\n  isHistoryEditor(value: any): value is HistoryEditor {\n    return History.isHistory(value.history) && Editor.isEditor(value)\n  },\n\n  /**\n   * Get the merge flag's current value.\n   */\n\n  isMerging(editor: HistoryEditor): boolean | undefined {\n    return MERGING.get(editor)\n  },\n\n  /**\n   * Get the splitting once flag's current value.\n   */\n\n  isSplittingOnce(editor: HistoryEditor): boolean | undefined {\n    return SPLITTING_ONCE.get(editor)\n  },\n\n  setSplittingOnce(editor: HistoryEditor, value: boolean | undefined): void {\n    SPLITTING_ONCE.set(editor, value)\n  },\n\n  /**\n   * Get the saving flag's current value.\n   */\n\n  isSaving(editor: HistoryEditor): boolean | undefined {\n    return SAVING.get(editor)\n  },\n\n  /**\n   * Redo to the previous saved state.\n   */\n\n  redo(editor: HistoryEditor): void {\n    editor.redo()\n  },\n\n  /**\n   * Undo to the previous saved state.\n   */\n\n  undo(editor: HistoryEditor): void {\n    editor.undo()\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, These operations will\n   * be merged into the previous history.\n   */\n  withMerging(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isMerging(editor)\n    MERGING.set(editor, true)\n    fn()\n    MERGING.set(editor, prev)\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, ensuring that the first\n   * operation starts a new batch in the history. Subsequent operations will be\n   * merged as usual.\n   */\n  withNewBatch(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isMerging(editor)\n    MERGING.set(editor, true)\n    SPLITTING_ONCE.set(editor, true)\n    fn()\n    MERGING.set(editor, prev)\n    SPLITTING_ONCE.delete(editor)\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\n   * the new operations into previous save point in the history.\n   */\n\n  withoutMerging(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isMerging(editor)\n    MERGING.set(editor, false)\n    fn()\n    MERGING.set(editor, prev)\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\n   * their operations into the history.\n   */\n\n  withoutSaving(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isSaving(editor)\n    SAVING.set(editor, false)\n    fn()\n    SAVING.set(editor, prev)\n  },\n}\n","import { Editor, Operation, Path, Transforms } from 'slate'\n\nimport { HistoryEditor } from './history-editor'\n\n/**\n * The `withHistory` plugin keeps track of the operation history of a Slate\n * editor as operations are applied to it, using undo and redo stacks.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\n\nexport const withHistory = <T extends Editor>(editor: T) => {\n  const e = editor as T & HistoryEditor\n  const { apply } = e\n  e.history = { undos: [], redos: [] }\n\n  e.redo = () => {\n    const { history } = e\n    const { redos } = history\n\n    if (redos.length > 0) {\n      const batch = redos[redos.length - 1]\n\n      if (batch.selectionBefore) {\n        Transforms.setSelection(e, batch.selectionBefore)\n      }\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          for (const op of batch.operations) {\n            e.apply(op)\n          }\n        })\n      })\n\n      history.redos.pop()\n      e.writeHistory('undos', batch)\n    }\n  }\n\n  e.undo = () => {\n    const { history } = e\n    const { undos } = history\n\n    if (undos.length > 0) {\n      const batch = undos[undos.length - 1]\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          const inverseOps = batch.operations.map(Operation.inverse).reverse()\n\n          for (const op of inverseOps) {\n            e.apply(op)\n          }\n          if (batch.selectionBefore) {\n            Transforms.setSelection(e, batch.selectionBefore)\n          }\n        })\n      })\n\n      e.writeHistory('redos', batch)\n      history.undos.pop()\n    }\n  }\n\n  e.apply = (op: Operation) => {\n    const { operations, history } = e\n    const { undos } = history\n    const lastBatch = undos[undos.length - 1]\n    const lastOp =\n      lastBatch && lastBatch.operations[lastBatch.operations.length - 1]\n    let save = HistoryEditor.isSaving(e)\n    let merge = HistoryEditor.isMerging(e)\n\n    if (save == null) {\n      save = shouldSave(op, lastOp)\n    }\n\n    if (save) {\n      if (merge == null) {\n        if (lastBatch == null) {\n          merge = false\n        } else if (operations.length !== 0) {\n          merge = true\n        } else {\n          merge = shouldMerge(op, lastOp)\n        }\n      }\n\n      if (HistoryEditor.isSplittingOnce(e)) {\n        merge = false\n        HistoryEditor.setSplittingOnce(e, undefined)\n      }\n\n      if (lastBatch && merge) {\n        lastBatch.operations.push(op)\n      } else {\n        const batch = {\n          operations: [op],\n          selectionBefore: e.selection,\n        }\n        e.writeHistory('undos', batch)\n      }\n\n      while (undos.length > 100) {\n        undos.shift()\n      }\n\n      history.redos = []\n    }\n\n    apply(op)\n  }\n\n  e.writeHistory = (stack: 'undos' | 'redos', batch: any) => {\n    e.history[stack].push(batch)\n  }\n\n  return e\n}\n\n/**\n * Check whether to merge an operation into the previous operation.\n */\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check whether an operation needs to be saved to the history.\n */\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n"],"names":["History","isHistory","value","isPlainObject","Array","isArray","redos","undos","length","Operation","isOperationList","operations","HISTORY","WeakMap","SAVING","MERGING","SPLITTING_ONCE","HistoryEditor","isHistoryEditor","history","Editor","isEditor","isMerging","editor","get","isSplittingOnce","setSplittingOnce","set","isSaving","redo","undo","withMerging","fn","prev","withNewBatch","withoutMerging","withoutSaving","withHistory","e","apply","batch","selectionBefore","Transforms","setSelection","withoutNormalizing","_iterator","_createForOfIteratorHelper","_step","s","n","done","op","err","f","pop","writeHistory","inverseOps","map","inverse","reverse","_iterator2","_step2","lastBatch","lastOp","save","merge","shouldSave","shouldMerge","undefined","push","selection","shift","stack","type","offset","text","Path","equals","path"],"mappings":";;;;;AAkBA;AACO,IAAMA,OAAO,GAAG;AACrB;;AAEG;EAEHC,SAAS,EAAA,SAAAA,SAACC,CAAAA,KAAU,EAAA;AAClB,IAAA,OACEC,2BAAa,CAACD,KAAK,CAAC,IACpBE,KAAK,CAACC,OAAO,CAACH,KAAK,CAACI,KAAK,CAAC,IAC1BF,KAAK,CAACC,OAAO,CAACH,KAAK,CAACK,KAAK,CAAC,KACzBL,KAAK,CAACI,KAAK,CAACE,MAAM,KAAK,CAAC,IACvBC,eAAS,CAACC,eAAe,CAACR,KAAK,CAACI,KAAK,CAAC,CAAC,CAAC,CAACK,UAAU,CAAC,CAAC,KACtDT,KAAK,CAACK,KAAK,CAACC,MAAM,KAAK,CAAC,IACvBC,eAAS,CAACC,eAAe,CAACR,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC,CAACI,UAAU,CAAC,CAAC,CAAA;AAE3D,GAAA;;;AC/BF;;AAEG;IAEUC,OAAO,GAAG,IAAIC,OAAO,GAAmB;IACxCC,MAAM,GAAG,IAAID,OAAO,GAA+B;IACnDE,OAAO,GAAG,IAAIF,OAAO,GAA+B;IACpDG,cAAc,GAAG,IAAIH,OAAO,GAA+B;AAaxE;AACO,IAAMI,aAAa,GAAG;AAC3B;;AAEG;EAEHC,eAAe,EAAA,SAAAA,eAAChB,CAAAA,KAAU,EAAA;AACxB,IAAA,OAAOF,OAAO,CAACC,SAAS,CAACC,KAAK,CAACiB,OAAO,CAAC,IAAIC,YAAM,CAACC,QAAQ,CAACnB,KAAK,CAAC,CAAA;GAClE;AAED;;AAEG;EAEHoB,SAAS,EAAA,SAAAA,SAACC,CAAAA,MAAqB,EAAA;AAC7B,IAAA,OAAOR,OAAO,CAACS,GAAG,CAACD,MAAM,CAAC,CAAA;GAC3B;AAED;;AAEG;EAEHE,eAAe,EAAA,SAAAA,eAACF,CAAAA,MAAqB,EAAA;AACnC,IAAA,OAAOP,cAAc,CAACQ,GAAG,CAACD,MAAM,CAAC,CAAA;GAClC;AAEDG,EAAAA,gBAAgB,EAAAA,SAAAA,gBAAAA,CAACH,MAAqB,EAAErB,KAA0B,EAAA;AAChEc,IAAAA,cAAc,CAACW,GAAG,CAACJ,MAAM,EAAErB,KAAK,CAAC,CAAA;GAClC;AAED;;AAEG;EAEH0B,QAAQ,EAAA,SAAAA,QAACL,CAAAA,MAAqB,EAAA;AAC5B,IAAA,OAAOT,MAAM,CAACU,GAAG,CAACD,MAAM,CAAC,CAAA;GAC1B;AAED;;AAEG;EAEHM,IAAI,EAAA,SAAAA,IAACN,CAAAA,MAAqB,EAAA;IACxBA,MAAM,CAACM,IAAI,EAAE,CAAA;GACd;AAED;;AAEG;EAEHC,IAAI,EAAA,SAAAA,IAACP,CAAAA,MAAqB,EAAA;IACxBA,MAAM,CAACO,IAAI,EAAE,CAAA;GACd;AAED;;;AAGG;AACHC,EAAAA,WAAW,EAAAA,SAAAA,WAAAA,CAACR,MAAqB,EAAES,EAAc,EAAA;AAC/C,IAAA,IAAMC,IAAI,GAAGhB,aAAa,CAACK,SAAS,CAACC,MAAM,CAAC,CAAA;AAC5CR,IAAAA,OAAO,CAACY,GAAG,CAACJ,MAAM,EAAE,IAAI,CAAC,CAAA;AACzBS,IAAAA,EAAE,EAAE,CAAA;AACJjB,IAAAA,OAAO,CAACY,GAAG,CAACJ,MAAM,EAAEU,IAAI,CAAC,CAAA;GAC1B;AAED;;;;AAIG;AACHC,EAAAA,YAAY,EAAAA,SAAAA,YAAAA,CAACX,MAAqB,EAAES,EAAc,EAAA;AAChD,IAAA,IAAMC,IAAI,GAAGhB,aAAa,CAACK,SAAS,CAACC,MAAM,CAAC,CAAA;AAC5CR,IAAAA,OAAO,CAACY,GAAG,CAACJ,MAAM,EAAE,IAAI,CAAC,CAAA;AACzBP,IAAAA,cAAc,CAACW,GAAG,CAACJ,MAAM,EAAE,IAAI,CAAC,CAAA;AAChCS,IAAAA,EAAE,EAAE,CAAA;AACJjB,IAAAA,OAAO,CAACY,GAAG,CAACJ,MAAM,EAAEU,IAAI,CAAC,CAAA;IACzBjB,cAAc,CAAA,QAAA,CAAO,CAACO,MAAM,CAAC,CAAA;GAC9B;AAED;;;AAGG;AAEHY,EAAAA,cAAc,EAAAA,SAAAA,cAAAA,CAACZ,MAAqB,EAAES,EAAc,EAAA;AAClD,IAAA,IAAMC,IAAI,GAAGhB,aAAa,CAACK,SAAS,CAACC,MAAM,CAAC,CAAA;AAC5CR,IAAAA,OAAO,CAACY,GAAG,CAACJ,MAAM,EAAE,KAAK,CAAC,CAAA;AAC1BS,IAAAA,EAAE,EAAE,CAAA;AACJjB,IAAAA,OAAO,CAACY,GAAG,CAACJ,MAAM,EAAEU,IAAI,CAAC,CAAA;GAC1B;AAED;;;AAGG;AAEHG,EAAAA,aAAa,EAAAA,SAAAA,aAAAA,CAACb,MAAqB,EAAES,EAAc,EAAA;AACjD,IAAA,IAAMC,IAAI,GAAGhB,aAAa,CAACW,QAAQ,CAACL,MAAM,CAAC,CAAA;AAC3CT,IAAAA,MAAM,CAACa,GAAG,CAACJ,MAAM,EAAE,KAAK,CAAC,CAAA;AACzBS,IAAAA,EAAE,EAAE,CAAA;AACJlB,IAAAA,MAAM,CAACa,GAAG,CAACJ,MAAM,EAAEU,IAAI,CAAC,CAAA;AAC1B,GAAA;;;;;;ACxHF;;;;;;;;AAQG;IAEUI,WAAW,GAAG,SAAdA,WAAWA,CAAsBd,MAAS,EAAI;EACzD,IAAMe,CAAC,GAAGf,MAA2B,CAAA;AACrC,EAAA,IAAQgB,KAAK,GAAKD,CAAC,CAAXC,KAAK,CAAA;EACbD,CAAC,CAACnB,OAAO,GAAG;AAAEZ,IAAAA,KAAK,EAAE,EAAE;AAAED,IAAAA,KAAK,EAAE,EAAA;GAAI,CAAA;EAEpCgC,CAAC,CAACT,IAAI,GAAG,YAAK;AACZ,IAAA,IAAQV,OAAO,GAAKmB,CAAC,CAAbnB,OAAO,CAAA;AACf,IAAA,IAAQb,KAAK,GAAKa,OAAO,CAAjBb,KAAK,CAAA;AAEb,IAAA,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MACpB,IAAMgC,KAAK,GAAGlC,KAAK,CAACA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC,CAAA;MAErC,IAAIgC,KAAK,CAACC,eAAe,EAAE;QACzBC,gBAAU,CAACC,YAAY,CAACL,CAAC,EAAEE,KAAK,CAACC,eAAe,CAAC,CAAA;AAClD,OAAA;AAEDxB,MAAAA,aAAa,CAACmB,aAAa,CAACE,CAAC,EAAE,YAAK;AAClClB,QAAAA,YAAM,CAACwB,kBAAkB,CAACN,CAAC,EAAE,YAAK;AAAA,UAAA,IAAAO,SAAA,GAAAC,0BAAA,CACfN,KAAK,CAAC7B,UAAU,CAAA;YAAAoC,KAAA,CAAA;AAAA,UAAA,IAAA;YAAjC,KAAAF,SAAA,CAAAG,CAAA,EAAAD,EAAAA,CAAAA,CAAAA,KAAA,GAAAF,SAAA,CAAAI,CAAA,EAAAC,EAAAA,IAAA,GAAmC;AAAA,cAAA,IAAxBC,EAAE,GAAAJ,KAAA,CAAA7C,KAAA,CAAA;AACXoC,cAAAA,CAAC,CAACC,KAAK,CAACY,EAAE,CAAC,CAAA;AACZ,aAAA;AAAA,WAAA,CAAA,OAAAC,GAAA,EAAA;YAAAP,SAAA,CAAAP,CAAA,CAAAc,GAAA,CAAA,CAAA;AAAA,WAAA,SAAA;AAAAP,YAAAA,SAAA,CAAAQ,CAAA,EAAA,CAAA;AAAA,WAAA;AACH,SAAC,CAAC,CAAA;AACJ,OAAC,CAAC,CAAA;AAEFlC,MAAAA,OAAO,CAACb,KAAK,CAACgD,GAAG,EAAE,CAAA;AACnBhB,MAAAA,CAAC,CAACiB,YAAY,CAAC,OAAO,EAAEf,KAAK,CAAC,CAAA;AAC/B,KAAA;GACF,CAAA;EAEDF,CAAC,CAACR,IAAI,GAAG,YAAK;AACZ,IAAA,IAAQX,OAAO,GAAKmB,CAAC,CAAbnB,OAAO,CAAA;AACf,IAAA,IAAQZ,KAAK,GAAKY,OAAO,CAAjBZ,KAAK,CAAA;AAEb,IAAA,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACpB,IAAMgC,KAAK,GAAGjC,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,CAAA;AAErCS,MAAAA,aAAa,CAACmB,aAAa,CAACE,CAAC,EAAE,YAAK;AAClClB,QAAAA,YAAM,CAACwB,kBAAkB,CAACN,CAAC,EAAE,YAAK;AAChC,UAAA,IAAMkB,UAAU,GAAGhB,KAAK,CAAC7B,UAAU,CAAC8C,GAAG,CAAChD,eAAS,CAACiD,OAAO,CAAC,CAACC,OAAO,EAAE,CAAA;AAAA,UAAA,IAAAC,UAAA,GAAAd,0BAAA,CAEnDU,UAAU,CAAA;YAAAK,MAAA,CAAA;AAAA,UAAA,IAAA;YAA3B,KAAAD,UAAA,CAAAZ,CAAA,EAAAa,EAAAA,CAAAA,CAAAA,MAAA,GAAAD,UAAA,CAAAX,CAAA,EAAAC,EAAAA,IAAA,GAA6B;AAAA,cAAA,IAAlBC,EAAE,GAAAU,MAAA,CAAA3D,KAAA,CAAA;AACXoC,cAAAA,CAAC,CAACC,KAAK,CAACY,EAAE,CAAC,CAAA;AACZ,aAAA;AAAA,WAAA,CAAA,OAAAC,GAAA,EAAA;YAAAQ,UAAA,CAAAtB,CAAA,CAAAc,GAAA,CAAA,CAAA;AAAA,WAAA,SAAA;AAAAQ,YAAAA,UAAA,CAAAP,CAAA,EAAA,CAAA;AAAA,WAAA;UACD,IAAIb,KAAK,CAACC,eAAe,EAAE;YACzBC,gBAAU,CAACC,YAAY,CAACL,CAAC,EAAEE,KAAK,CAACC,eAAe,CAAC,CAAA;AAClD,WAAA;AACH,SAAC,CAAC,CAAA;AACJ,OAAC,CAAC,CAAA;AAEFH,MAAAA,CAAC,CAACiB,YAAY,CAAC,OAAO,EAAEf,KAAK,CAAC,CAAA;AAC9BrB,MAAAA,OAAO,CAACZ,KAAK,CAAC+C,GAAG,EAAE,CAAA;AACpB,KAAA;GACF,CAAA;AAEDhB,EAAAA,CAAC,CAACC,KAAK,GAAG,UAACY,EAAa,EAAI;AAC1B,IAAA,IAAQxC,UAAU,GAAc2B,CAAC,CAAzB3B,UAAU;MAAEQ,OAAO,GAAKmB,CAAC,CAAbnB,OAAO,CAAA;AAC3B,IAAA,IAAQZ,KAAK,GAAKY,OAAO,CAAjBZ,KAAK,CAAA;IACb,IAAMuD,SAAS,GAAGvD,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,CAAA;AACzC,IAAA,IAAMuD,MAAM,GACVD,SAAS,IAAIA,SAAS,CAACnD,UAAU,CAACmD,SAAS,CAACnD,UAAU,CAACH,MAAM,GAAG,CAAC,CAAC,CAAA;AACpE,IAAA,IAAIwD,IAAI,GAAG/C,aAAa,CAACW,QAAQ,CAACU,CAAC,CAAC,CAAA;AACpC,IAAA,IAAI2B,KAAK,GAAGhD,aAAa,CAACK,SAAS,CAACgB,CAAC,CAAC,CAAA;IAEtC,IAAI0B,IAAI,IAAI,IAAI,EAAE;AAChBA,MAAAA,IAAI,GAAGE,UAAU,CAACf,EAAU,CAAC,CAAA;AAC9B,KAAA;AAED,IAAA,IAAIa,IAAI,EAAE;MACR,IAAIC,KAAK,IAAI,IAAI,EAAE;QACjB,IAAIH,SAAS,IAAI,IAAI,EAAE;AACrBG,UAAAA,KAAK,GAAG,KAAK,CAAA;AACd,SAAA,MAAM,IAAItD,UAAU,CAACH,MAAM,KAAK,CAAC,EAAE;AAClCyD,UAAAA,KAAK,GAAG,IAAI,CAAA;AACb,SAAA,MAAM;AACLA,UAAAA,KAAK,GAAGE,WAAW,CAAChB,EAAE,EAAEY,MAAM,CAAC,CAAA;AAChC,SAAA;AACF,OAAA;AAED,MAAA,IAAI9C,aAAa,CAACQ,eAAe,CAACa,CAAC,CAAC,EAAE;AACpC2B,QAAAA,KAAK,GAAG,KAAK,CAAA;AACbhD,QAAAA,aAAa,CAACS,gBAAgB,CAACY,CAAC,EAAE8B,SAAS,CAAC,CAAA;AAC7C,OAAA;MAED,IAAIN,SAAS,IAAIG,KAAK,EAAE;AACtBH,QAAAA,SAAS,CAACnD,UAAU,CAAC0D,IAAI,CAAClB,EAAE,CAAC,CAAA;AAC9B,OAAA,MAAM;AACL,QAAA,IAAMX,KAAK,GAAG;UACZ7B,UAAU,EAAE,CAACwC,EAAE,CAAC;UAChBV,eAAe,EAAEH,CAAC,CAACgC,SAAAA;SACpB,CAAA;AACDhC,QAAAA,CAAC,CAACiB,YAAY,CAAC,OAAO,EAAEf,KAAK,CAAC,CAAA;AAC/B,OAAA;AAED,MAAA,OAAOjC,KAAK,CAACC,MAAM,GAAG,GAAG,EAAE;QACzBD,KAAK,CAACgE,KAAK,EAAE,CAAA;AACd,OAAA;MAEDpD,OAAO,CAACb,KAAK,GAAG,EAAE,CAAA;AACnB,KAAA;IAEDiC,KAAK,CAACY,EAAE,CAAC,CAAA;GACV,CAAA;AAEDb,EAAAA,CAAC,CAACiB,YAAY,GAAG,UAACiB,KAAwB,EAAEhC,KAAU,EAAI;IACxDF,CAAC,CAACnB,OAAO,CAACqD,KAAK,CAAC,CAACH,IAAI,CAAC7B,KAAK,CAAC,CAAA;GAC7B,CAAA;AAED,EAAA,OAAOF,CAAC,CAAA;AACV,EAAC;AAED;;AAEG;AAEH,IAAM6B,WAAW,GAAG,SAAdA,WAAWA,CAAIhB,EAAa,EAAElB,IAA2B,EAAa;AAC1E,EAAA,IACEA,IAAI,IACJkB,EAAE,CAACsB,IAAI,KAAK,aAAa,IACzBxC,IAAI,CAACwC,IAAI,KAAK,aAAa,IAC3BtB,EAAE,CAACuB,MAAM,KAAKzC,IAAI,CAACyC,MAAM,GAAGzC,IAAI,CAAC0C,IAAI,CAACnE,MAAM,IAC5CoE,UAAI,CAACC,MAAM,CAAC1B,EAAE,CAAC2B,IAAI,EAAE7C,IAAI,CAAC6C,IAAI,CAAC,EAC/B;AACA,IAAA,OAAO,IAAI,CAAA;AACZ,GAAA;AAED,EAAA,IACE7C,IAAI,IACJkB,EAAE,CAACsB,IAAI,KAAK,aAAa,IACzBxC,IAAI,CAACwC,IAAI,KAAK,aAAa,IAC3BtB,EAAE,CAACuB,MAAM,GAAGvB,EAAE,CAACwB,IAAI,CAACnE,MAAM,KAAKyB,IAAI,CAACyC,MAAM,IAC1CE,UAAI,CAACC,MAAM,CAAC1B,EAAE,CAAC2B,IAAI,EAAE7C,IAAI,CAAC6C,IAAI,CAAC,EAC/B;AACA,IAAA,OAAO,IAAI,CAAA;AACZ,GAAA;AAED,EAAA,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAED;;AAEG;AAEH,IAAMZ,UAAU,GAAG,SAAbA,UAAUA,CAAIf,EAAa,EAAElB,IAA2B,EAAa;AACzE,EAAA,IAAIkB,EAAE,CAACsB,IAAI,KAAK,eAAe,EAAE;AAC/B,IAAA,OAAO,KAAK,CAAA;AACb,GAAA;AAED,EAAA,OAAO,IAAI,CAAA;AACb,CAAC;;;;;;;;;;"}