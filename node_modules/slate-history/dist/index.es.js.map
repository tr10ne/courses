{"version":3,"file":"index.es.js","sources":["../src/history.ts","../src/history-editor.ts","../src/with-history.ts"],"sourcesContent":["import { isPlainObject } from 'is-plain-object'\nimport { Operation, Range } from 'slate'\n\ninterface Batch {\n  operations: Operation[]\n  selectionBefore: Range | null\n}\n\n/**\n * `History` objects hold all of the operations that are applied to a value, so\n * they can be undone or redone as necessary.\n */\n\nexport interface History {\n  redos: Batch[]\n  undos: Batch[]\n}\n\n// eslint-disable-next-line no-redeclare\nexport const History = {\n  /**\n   * Check if a value is a `History` object.\n   */\n\n  isHistory(value: any): value is History {\n    return (\n      isPlainObject(value) &&\n      Array.isArray(value.redos) &&\n      Array.isArray(value.undos) &&\n      (value.redos.length === 0 ||\n        Operation.isOperationList(value.redos[0].operations)) &&\n      (value.undos.length === 0 ||\n        Operation.isOperationList(value.undos[0].operations))\n    )\n  },\n}\n","import { BaseEditor, Editor } from 'slate'\nimport { History } from './history'\n\n/**\n * Weakmaps for attaching state to the editor.\n */\n\nexport const HISTORY = new WeakMap<Editor, History>()\nexport const SAVING = new WeakMap<Editor, boolean | undefined>()\nexport const MERGING = new WeakMap<Editor, boolean | undefined>()\nexport const SPLITTING_ONCE = new WeakMap<Editor, boolean | undefined>()\n\n/**\n * `HistoryEditor` contains helpers for history-enabled editors.\n */\n\nexport interface HistoryEditor extends BaseEditor {\n  history: History\n  undo: () => void\n  redo: () => void\n  writeHistory: (stack: 'undos' | 'redos', batch: any) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const HistoryEditor = {\n  /**\n   * Check if a value is a `HistoryEditor` object.\n   */\n\n  isHistoryEditor(value: any): value is HistoryEditor {\n    return History.isHistory(value.history) && Editor.isEditor(value)\n  },\n\n  /**\n   * Get the merge flag's current value.\n   */\n\n  isMerging(editor: HistoryEditor): boolean | undefined {\n    return MERGING.get(editor)\n  },\n\n  /**\n   * Get the splitting once flag's current value.\n   */\n\n  isSplittingOnce(editor: HistoryEditor): boolean | undefined {\n    return SPLITTING_ONCE.get(editor)\n  },\n\n  setSplittingOnce(editor: HistoryEditor, value: boolean | undefined): void {\n    SPLITTING_ONCE.set(editor, value)\n  },\n\n  /**\n   * Get the saving flag's current value.\n   */\n\n  isSaving(editor: HistoryEditor): boolean | undefined {\n    return SAVING.get(editor)\n  },\n\n  /**\n   * Redo to the previous saved state.\n   */\n\n  redo(editor: HistoryEditor): void {\n    editor.redo()\n  },\n\n  /**\n   * Undo to the previous saved state.\n   */\n\n  undo(editor: HistoryEditor): void {\n    editor.undo()\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, These operations will\n   * be merged into the previous history.\n   */\n  withMerging(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isMerging(editor)\n    MERGING.set(editor, true)\n    fn()\n    MERGING.set(editor, prev)\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, ensuring that the first\n   * operation starts a new batch in the history. Subsequent operations will be\n   * merged as usual.\n   */\n  withNewBatch(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isMerging(editor)\n    MERGING.set(editor, true)\n    SPLITTING_ONCE.set(editor, true)\n    fn()\n    MERGING.set(editor, prev)\n    SPLITTING_ONCE.delete(editor)\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\n   * the new operations into previous save point in the history.\n   */\n\n  withoutMerging(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isMerging(editor)\n    MERGING.set(editor, false)\n    fn()\n    MERGING.set(editor, prev)\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\n   * their operations into the history.\n   */\n\n  withoutSaving(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isSaving(editor)\n    SAVING.set(editor, false)\n    fn()\n    SAVING.set(editor, prev)\n  },\n}\n","import { Editor, Operation, Path, Transforms } from 'slate'\n\nimport { HistoryEditor } from './history-editor'\n\n/**\n * The `withHistory` plugin keeps track of the operation history of a Slate\n * editor as operations are applied to it, using undo and redo stacks.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\n\nexport const withHistory = <T extends Editor>(editor: T) => {\n  const e = editor as T & HistoryEditor\n  const { apply } = e\n  e.history = { undos: [], redos: [] }\n\n  e.redo = () => {\n    const { history } = e\n    const { redos } = history\n\n    if (redos.length > 0) {\n      const batch = redos[redos.length - 1]\n\n      if (batch.selectionBefore) {\n        Transforms.setSelection(e, batch.selectionBefore)\n      }\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          for (const op of batch.operations) {\n            e.apply(op)\n          }\n        })\n      })\n\n      history.redos.pop()\n      e.writeHistory('undos', batch)\n    }\n  }\n\n  e.undo = () => {\n    const { history } = e\n    const { undos } = history\n\n    if (undos.length > 0) {\n      const batch = undos[undos.length - 1]\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          const inverseOps = batch.operations.map(Operation.inverse).reverse()\n\n          for (const op of inverseOps) {\n            e.apply(op)\n          }\n          if (batch.selectionBefore) {\n            Transforms.setSelection(e, batch.selectionBefore)\n          }\n        })\n      })\n\n      e.writeHistory('redos', batch)\n      history.undos.pop()\n    }\n  }\n\n  e.apply = (op: Operation) => {\n    const { operations, history } = e\n    const { undos } = history\n    const lastBatch = undos[undos.length - 1]\n    const lastOp =\n      lastBatch && lastBatch.operations[lastBatch.operations.length - 1]\n    let save = HistoryEditor.isSaving(e)\n    let merge = HistoryEditor.isMerging(e)\n\n    if (save == null) {\n      save = shouldSave(op, lastOp)\n    }\n\n    if (save) {\n      if (merge == null) {\n        if (lastBatch == null) {\n          merge = false\n        } else if (operations.length !== 0) {\n          merge = true\n        } else {\n          merge = shouldMerge(op, lastOp)\n        }\n      }\n\n      if (HistoryEditor.isSplittingOnce(e)) {\n        merge = false\n        HistoryEditor.setSplittingOnce(e, undefined)\n      }\n\n      if (lastBatch && merge) {\n        lastBatch.operations.push(op)\n      } else {\n        const batch = {\n          operations: [op],\n          selectionBefore: e.selection,\n        }\n        e.writeHistory('undos', batch)\n      }\n\n      while (undos.length > 100) {\n        undos.shift()\n      }\n\n      history.redos = []\n    }\n\n    apply(op)\n  }\n\n  e.writeHistory = (stack: 'undos' | 'redos', batch: any) => {\n    e.history[stack].push(batch)\n  }\n\n  return e\n}\n\n/**\n * Check whether to merge an operation into the previous operation.\n */\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check whether an operation needs to be saved to the history.\n */\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n"],"names":["History","isHistory","value","isPlainObject","Array","isArray","redos","undos","length","Operation","isOperationList","operations","HISTORY","WeakMap","SAVING","MERGING","SPLITTING_ONCE","HistoryEditor","isHistoryEditor","history","Editor","isEditor","isMerging","editor","get","isSplittingOnce","setSplittingOnce","set","isSaving","redo","undo","withMerging","fn","prev","withNewBatch","delete","withoutMerging","withoutSaving","withHistory","e","apply","batch","selectionBefore","Transforms","setSelection","withoutNormalizing","op","pop","writeHistory","inverseOps","map","inverse","reverse","lastBatch","lastOp","save","merge","shouldSave","shouldMerge","undefined","push","selection","shift","stack","type","offset","text","Path","equals","path"],"mappings":"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"}